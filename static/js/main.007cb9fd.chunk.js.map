{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","imgs/Netflix-Logo.png","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","_ref","title","fetchUrl","isLargeRow","movies","setMovies","useState","trailerUrl","setTrailerUrl","useEffect","async","request","get","data","results","fetchData","_jsxs","className","children","_jsx","map","movie","onClick","console","log","movieTrailer","original_name","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","Youtube","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","str","overview","n","substr","Nav","show","handleShow","window","addEventListener","scrollY","netflixLogo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.007cb9fd.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/** base url to make requests to the movie database */\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  //A snippet of code that runs base on a specific condition/variable\n\n  useEffect(() => {\n    // make a request to TMDB for movies when ROW loads\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    console.log(movie);\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.original_name || movie?.title || movie?.name)\n        .then((url) => {\n          console.log(url);\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"1ad66d06aad3ae3e759948317cf52010\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <div>\n      <header\n        className=\"banner\"\n        style={{\n          backgroundSize: \"cover\",\n          backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        }}\n      >\n        <div className=\"banner__contents\">\n          <h1 className=\"banner__title\">\n            {movie?.title || movie?.name || movie?.original_name}\n          </h1>\n          <div className=\"banner__buttons\">\n            <button className=\"banner__button\">Play</button>\n            <button className=\"banner__button\">My List</button>\n          </div>\n          <h1 className=\"banner__description\">\n            {truncate(movie?.overview, 150)}\n          </h1>\n        </div>\n\n        <div className=\"banner--fadeBottom\" />\n      </header>\n    </div>\n  );\n};\n\nexport default Banner;\n","export default __webpack_public_path__ + \"static/media/Netflix-Logo.a3092e10.png\";","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\nimport netflixLogo from \"./imgs/Netflix-Logo.png\";\n\nconst Nav = () => {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n  });\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img className=\"nav__logo\" src={netflixLogo} alt=\"Netflix Logo\" />\n\n      <img\n        className=\"nav__avatar\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n        alt=\"Netflix User Avatar\"\n      />\n    </div>\n  );\n};\n\nexport default Nav;\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"Netflix originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}