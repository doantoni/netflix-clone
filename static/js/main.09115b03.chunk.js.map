{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","imgs/Netflix-Logo.png","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","console","log","movieTrailer","original_name","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","netflixLogo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09115b03.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/** base url to make requests to the movie database */\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  //A snippet of code that runs base on a specific condition/variable\r\n\r\n  useEffect(() => {\r\n    // make a request to TMDB for movies when ROW loads\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    console.log(movie);\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.original_name || movie?.title || movie?.name)\r\n        .then((url) => {\r\n          console.log(url);\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"1ad66d06aad3ae3e759948317cf52010\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header\r\n        className=\"banner\"\r\n        style={{\r\n          backgroundSize: \"cover\",\r\n          backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        }}\r\n      >\r\n        <div className=\"banner__contents\">\r\n          <h1 className=\"banner__title\">\r\n            {movie?.title || movie?.name || movie?.original_name}\r\n          </h1>\r\n          <div className=\"banner__buttons\">\r\n            <button className=\"banner__button\">Play</button>\r\n            <button className=\"banner__button\">My List</button>\r\n          </div>\r\n          <h1 className=\"banner__description\">\r\n            {truncate(movie?.overview, 150)}\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"banner--fadeBottom\" />\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","export default __webpack_public_path__ + \"static/media/Netflix-Logo.a3092e10.png\";","import React, { useState, useEffect } from \"react\";\r\nimport \"./Nav.css\";\r\nimport netflixLogo from \"./imgs/Netflix-Logo.png\";\r\n\r\nconst Nav = () => {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img className=\"nav__logo\" src={netflixLogo} alt=\"Netflix Logo\" />\r\n\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"Netflix User Avatar\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import \"./App.css\";\r\nimport Row from \"./Row\";\r\nimport requests from \"./requests\";\r\nimport Banner from \"./Banner\";\r\nimport Nav from \"./Nav\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <Banner />\r\n      <Row\r\n        title=\"Netflix originals\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title=\"Trending now\" fetchUrl={requests.fetchTrending} />\r\n      <Row title=\"Top rated\" fetchUrl={requests.fetchTopRated} />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}